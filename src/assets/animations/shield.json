{
  "v": "4.8.0",
  "meta": { "g": "LottieFiles AE 1.1.0", "a": "", "k": "", "d": "", "tc": "" },
  "fr": 60,
  "ip": 0,
  "op": 188,
  "w": 60,
  "h": 60,
  "nm": "shield",
  "ddd": 0,
  "assets": [],
  "layers": [
    {
      "ddd": 0,
      "ind": 1,
      "ty": 4,
      "nm": "Lock Outlines",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 0,
              "s": [0]
            },
            { "t": 112, "s": [1080] }
          ],
          "ix": 10,
          "x": "var $bm_rt;\nfunction easeandwizz_inoutSine(t, b, c, d) {\n    return $bm_sum($bm_mul($bm_div($bm_neg(c), 2), $bm_sub(Math.cos($bm_div($bm_mul(Math.PI, t), d)), 1)), b);\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inoutSine(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inoutSine(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inoutSine(t, sY, eY, d);\n            val3 = easeandwizz_inoutSine(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "p": { "a": 0, "k": [29.064, 29.294, 0], "ix": 2 },
        "a": { "a": 0, "k": [4.737, 8.251, 0], "ix": 1 },
        "s": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833, 0.833, 0.833], "y": [0.833, 0.833, 0.833] },
              "o": { "x": [0.167, 0.167, 0.167], "y": [0.167, 0.167, 0.167] },
              "t": 0,
              "s": [0, 0, 100]
            },
            { "t": 112, "s": [100, 100, 100] }
          ],
          "ix": 6,
          "x": "var $bm_rt;\nfunction easeandwizz_inoutSine(t, b, c, d) {\n    return $bm_sum($bm_mul($bm_div($bm_neg(c), 2), $bm_sub(Math.cos($bm_div($bm_mul(Math.PI, t), d)), 1)), b);\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inoutSine(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inoutSine(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inoutSine(t, sY, eY, d);\n            val3 = easeandwizz_inoutSine(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        }
      },
      "ao": 0,
      "shapes": [
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [-0.001, -1.787],
                    [1.687, -0.597],
                    [0, 0],
                    [0.762, -0.147],
                    [0.09, 0],
                    [0, 0],
                    [-0.001, 0.777],
                    [-0.017, 0.087],
                    [0, 0],
                    [-0.777, 2.197],
                    [-2.196, -0.777]
                  ],
                  "o": [
                    [0.001, 1.789],
                    [0, 0],
                    [0.148, 0.762],
                    [-0.088, 0.017],
                    [0, 0],
                    [-0.777, -0.001],
                    [0.001, -0.089],
                    [0, 0],
                    [-2.197, -0.777],
                    [0.776, -2.197],
                    [1.685, 0.595]
                  ],
                  "v": [
                    [4.486, -3.249],
                    [1.673, 0.731],
                    [2.756, 6.328],
                    [1.643, 7.975],
                    [1.375, 8.001],
                    [-0.841, 8.001],
                    [-2.245, 6.592],
                    [-2.219, 6.328],
                    [-1.139, 0.731],
                    [-3.71, -4.653],
                    [1.673, -7.224]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1",
              "mn": "ADBE Vector Shape - Group",
              "hd": false
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [0, 0, 0, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "bm": 0,
              "nm": "Fill 1",
              "mn": "ADBE Vector Graphic - Fill",
              "hd": false
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [4.737, 8.251], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 1",
          "np": 2,
          "cix": 2,
          "bm": 0,
          "ix": 1,
          "mn": "ADBE Vector Group",
          "hd": false
        }
      ],
      "ip": 0,
      "op": 3600,
      "st": 0,
      "bm": 0
    },
    {
      "ddd": 0,
      "ind": 3,
      "ty": 4,
      "nm": "Shield Outlines",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 0,
              "s": [0]
            },
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 32,
              "s": [-10]
            },
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 64,
              "s": [10]
            },
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 96,
              "s": [0]
            },
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 112,
              "s": [-10]
            },
            { "t": 128, "s": [0] }
          ],
          "ix": 10,
          "x": "var $bm_rt;\nfunction easeandwizz_inoutSine(t, b, c, d) {\n    return $bm_sum($bm_mul($bm_div($bm_neg(c), 2), $bm_sub(Math.cos($bm_div($bm_mul(Math.PI, t), d)), 1)), b);\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inoutSine(t, sX, eX, d);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inoutSine(t, sY, eY, d);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inoutSine(t, sY, eY, d);\n            val3 = easeandwizz_inoutSine(t, sZ, eZ, d);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "p": { "a": 0, "k": [29.332, 30.264, 0], "ix": 2 },
        "a": { "a": 0, "k": [21.217, 22.75, 0], "ix": 1 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6 }
      },
      "ao": 0,
      "shapes": [
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [-2.726, 0.75],
                    [-1.941, 0],
                    [-3.052, -0.83],
                    [-1.851, -0.605],
                    [-0.216, -1.648],
                    [4.719, -6.173],
                    [2.692, -1.932],
                    [1.03, -0.501],
                    [0.697, 0],
                    [0.791, 0.371],
                    [0.931, 0.669],
                    [2.001, 2.641],
                    [-1.676, 12.592],
                    [-1.579, 0.521]
                  ],
                  "o": [
                    [3.052, -0.83],
                    [1.941, 0],
                    [3.122, 0.844],
                    [1.579, 0.521],
                    [1.676, 12.592],
                    [-2.001, 2.641],
                    [-0.931, 0.669],
                    [-0.788, 0.371],
                    [-0.698, 0],
                    [-1.03, -0.501],
                    [-2.692, -1.932],
                    [-4.72, -6.173],
                    [0.216, -1.648],
                    [2.687, -0.881]
                  ],
                  "v": [
                    [-8.235, -20.925],
                    [0, -22.5],
                    [8.235, -20.925],
                    [16.355, -18.478],
                    [19.291, -14.929],
                    [12.358, 13.168],
                    [5.279, 20.067],
                    [2.332, 21.825],
                    [0, 22.5],
                    [-2.332, 21.825],
                    [-5.279, 20.067],
                    [-12.358, 13.168],
                    [-19.291, -14.929],
                    [-16.355, -18.478]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1",
              "mn": "ADBE Vector Shape - Group",
              "hd": false
            },
            {
              "ind": 1,
              "ty": "sh",
              "ix": 2,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [0, 0],
                    [2.64, -0.866],
                    [0.072, -0.512],
                    [-4.295, -5.619],
                    [-2.445, -1.761],
                    [-0.678, -0.318],
                    [-0.211, -0.065],
                    [-0.097, -0.014],
                    [-0.091, 0.031],
                    [-0.337, 0.16],
                    [-0.973, 0.683],
                    [-1.818, 2.403],
                    [1.559, 11.692],
                    [0.492, 0.159],
                    [3.057, 0.829],
                    [1.493, 0],
                    [3.122, -0.847]
                  ],
                  "o": [
                    [-2.679, 0.738],
                    [-0.492, 0.16],
                    [-1.559, 11.692],
                    [1.818, 2.403],
                    [0.973, 0.686],
                    [0.337, 0.16],
                    [0.092, 0.032],
                    [0.096, -0.015],
                    [0.214, -0.065],
                    [0.675, -0.318],
                    [2.445, -1.761],
                    [4.295, -5.616],
                    [-0.072, -0.512],
                    [-1.831, -0.599],
                    [-3.122, -0.847],
                    [-1.491, 0],
                    [0, 0]
                  ],
                  "v": [
                    [-7.487, -18.028],
                    [-15.466, -15.621],
                    [-16.388, -14.524],
                    [-10.052, 11.317],
                    [-3.62, 17.598],
                    [-1.108, 19.097],
                    [-0.284, 19.429],
                    [0, 19.499],
                    [0.281, 19.429],
                    [1.108, 19.097],
                    [3.62, 17.598],
                    [10.052, 11.317],
                    [16.388, -14.524],
                    [15.466, -15.621],
                    [7.487, -18.025],
                    [0, -19.499],
                    [-7.487, -18.025]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 2",
              "mn": "ADBE Vector Shape - Group",
              "hd": false
            },
            {
              "ty": "mm",
              "mm": 1,
              "nm": "Merge Paths 1",
              "mn": "ADBE Vector Filter - Merge",
              "hd": false
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [0, 0, 0, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "bm": 0,
              "nm": "Fill 1",
              "mn": "ADBE Vector Graphic - Fill",
              "hd": false
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [21.217, 22.75], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 1",
          "np": 4,
          "cix": 2,
          "bm": 0,
          "ix": 1,
          "mn": "ADBE Vector Group",
          "hd": false
        }
      ],
      "ip": 0,
      "op": 3600,
      "st": 0,
      "bm": 0
    }
  ],
  "markers": []
}
